==for volatile PCM: accepted by LCTES'2013:
PCM1.cpp
PCM2.cpp

==for volatile STT-RAM: accepted by ASP-DAC'2013:
two methods and three schemes:
two methods include ilp and non-ilp implementation.
three schemes include full-refresh, dirty-refresh, and N-refresh. Controller by the HwOpti options.

0. qaliTrace.cpp:
input: the application code
output: the encoded trace.

1. non-ilp implementation
1.1 SymbolTrace.cpp:
input: the encoded trace
output: the pair-wise graph, as well as the baseline results
1.2 allocate.cpp: 
input: the pair-wise graph
output: the data-map as allocaton result 
1.3 SymbolTraceOpti.cpp:
input: the encoded trace, the data-map as the allocation result
output: the optimized results

2. ilp implementation
2.1 volTrace2ilp.cpp: 
input: the encoded trace
output: the timed trace for ilp, the pair-wise graph, and baseline results.
2.2 ilp solver:
input: the timed trace <id, timestamp, data, function, size>, the blocks to allocate
output: the data-map as allocation result
2.3 SymbolTraceOpti.cpp
input: ...
output: ...

3. lifetime2.cpp
input: the encoded trace
output: the life time intervals for each write
 
== for PCM wear levelling: accepted by DATE'2014
1. pwlWriteDist.cpp
input: the profiling distance
output: the number of writes as well as functions for each distance

2. pwlWriteDist1.cpp
It is the same to pwlWriteDist.cpp, except that it is only concerned with user functions.

== for common use ====
1. IRWCounter: to count the basic features of a benchmark, like insts, reads, writes, footprint
